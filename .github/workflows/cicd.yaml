name: Docker Build and Push

on:
  push:
    branches:
      - main

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
  TIMESTAMP: ${{ github.run_id }}-${{ github.run_number }}
  
  # Production deployment configuration (recommended)
  BACKEND_API_HOST: https://api.yourdomain.com  # CHANGE TO YOUR PRODUCTION URL
  DB_HOST: your-database-host.com              # CHANGE TO YOUR DB HOST

  # OR for Docker network deployment (alternative):
  # BACKEND_API_HOST: http://laravel-backend:8000
  # DB_HOST: postgres-db

  # Common configuration
  DB_CONNECTION: pgsql
  DB_PORT: 5432
  DB_DATABASE: laravel
  DB_USERNAME: postgres

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Build and push PostgreSQL image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.Postgres
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/postgres-db:latest
            ${{ env.DOCKER_HUB_USERNAME }}/postgres-db:${{ env.TIMESTAMP }}
          build-args: |
            POSTGRES_USER=${{ env.DB_USERNAME }}
            POSTGRES_DB=${{ env.DB_DATABASE }}
          secrets: |
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}

      - name: Build and push Laravel back-end
        uses: docker/build-push-action@v4
        with:
          context: ./back-end
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/laravel-backend:latest
            ${{ env.DOCKER_HUB_USERNAME }}/laravel-backend:${{ env.TIMESTAMP }}
          build-args: |
            APP_ENV=production
            DB_CONNECTION=${{ env.DB_CONNECTION }}
            DB_HOST=${{ env.DB_HOST }}
            DB_PORT=${{ env.DB_PORT }}
            DB_DATABASE=${{ env.DB_DATABASE }}
            DB_USERNAME=${{ env.DB_USERNAME }}
          secrets: |
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

      - name: Build and push Next.js front-end
        uses: docker/build-push-action@v4
        with:
          context: ./front-end
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/nextjs-frontend:latest
            ${{ env.DOCKER_HUB_USERNAME }}/nextjs-frontend:${{ env.TIMESTAMP }}
          build-args: |
            BACKEND_API_HOST=${{ env.BACKEND_API_HOST }}





  # deploy-to-ec2:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.REGION }}

  #     - name: Connect to EC2 and verify access
  #       run: |
  #         echo "Attempting to connect to EC2 instance..."
  #         ssh -o StrictHostKeyChecking=no -i ~/.ssh/clm_cicd_key.pem ubuntu@${{ secrets.CLM_CICD_KEY}} "echo 'Successfully connected to EC2!'"

  deploy-to-ec2:
    permissions:
      id-token: write
      contents: read
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        id: aws-auth
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/githubaction_role
          # role-session-name: github-actions-${{ github.repository }}-${{ github.run_id }}
          # audience: sts.amazonaws.com

      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CLM_CICD_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.IP }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection to EC2
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.IP }} "echo 'âœ… SSH Connection Successful'"

    #   - name: Install SSH Key
    #     uses: shimataro/ssh-key-action@v2
    #     with:
    #       key: ${{ secrets.EC2_SSH_KEY }}
    #       known_hosts: ${{ secrets.EC2_KNOWN_HOSTS }}

    #   - name: Prepare Deployment Files
    #     run: |
    #       # Create production environment file
    #       cat <<EOF > .env.production
    #       COMPOSE_PROJECT_NAME=${{ env.COMPOSE_PROJECT_NAME }}
    #       TAG=${{ env.TIMESTAMP }}
    #       DOCKER_HUB_USERNAME=${{ env.DOCKER_HUB_USERNAME }}
    #       DB_PASSWORD=${{ secrets.DB_PASSWORD }}
    #       EOF

    #       # Create deployment script
    #       cat <<'EOF' > deploy.sh
    #       #!/bin/bash
    #       cd $DEPLOY_DIR || exit 1
          
    #       echo "=== Logging in to Docker Hub ==="
    #       docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_TOKEN
          
    #       echo "=== Pulling new images ==="
    #       docker compose -f docker-compose.prod.yml pull
          
    #       echo "=== Stopping old containers ==="
    #       docker compose -f docker-compose.prod.yml down
          
    #       echo "=== Starting new containers ==="
    #       docker compose -f docker-compose.prod.yml up -d --remove-orphans
          
    #       echo "=== Cleaning up ==="
    #       docker system prune -af
          
    #       echo "=== Current running containers ==="
    #       docker ps --filter "name=$COMPOSE_PROJECT_NAME" --format "table {{.Names}}\t{{.Status}}"
    #       EOF
    #       chmod +x deploy.sh

    #   - name: Copy Files to EC2
    #     run: |
    #       scp -o StrictHostKeyChecking=no \
    #         docker-compose.prod.yml \
    #         ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.DEPLOY_DIR }}/
          
    #       scp -o StrictHostKeyChecking=no \
    #         .env.production \
    #         ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.DEPLOY_DIR }}/
          
    #       scp -o StrictHostKeyChecking=no \
    #         deploy.sh \
    #         ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.DEPLOY_DIR }}/

    #   - name: Execute Deployment
    #     run: |
    #       ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
    #         cd $DEPLOY_DIR
    #         chmod +x deploy.sh
    #         ./deploy.sh
    #       EOF

    #   - name: Verify Deployment
    #     run: |
    #       ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
    #         curl -s http://localhost:3000/health || echo 'Frontend not responding'
    #         curl -s http://localhost:8000/health || echo 'Backend not responding'
    #       "